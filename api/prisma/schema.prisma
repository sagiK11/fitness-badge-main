generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MeasureUnitEnum {
  MINUTES
  SECONDS
  AMOUNT
  CENTIMETERS
}

enum Gender {
  MALE
  FEMALE
}

model Admin {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model School {
  id         String      @id @default(uuid())
  name       String      @unique
  teachers   Teacher[]
  students   Student[]
  classrooms Classroom[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Teacher {
  id          String              @id @default(uuid())
  firstName   String
  lastName    String
  email       String              @unique
  school      School              @relation(fields: [schoolId], references: [id])
  schoolId    String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  enrollments TeacherEnrollment[]
}

model Student {
  id          String              @id @default(uuid())
  firstName   String
  lastName    String
  phone       String?
  gender      Gender
  tests       Test[]
  school      School              @relation(fields: [schoolId], references: [id])
  schoolId    String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  enrollments StudentEnrollment[]
}

model Classroom {
  id                 String              @id @default(uuid())
  name               String
  gender             Gender              @default(FEMALE)
  school             School              @relation(fields: [schoolId], references: [id])
  schoolId           String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  studentEnrollments StudentEnrollment[]
  teacherEnrollments TeacherEnrollment[]
  tests              Test[]

  @@unique([schoolId, name, gender])
}

model Test {
  id            String       @id @default(uuid())
  grade         Float        @db.DoublePrecision
  score         Float        @db.DoublePrecision
  student       Student      @relation(fields: [studentId], references: [id])
  studentId     String
  category      TestCategory @relation(fields: [categoryId], references: [id])
  categoryId    String
  yearsOfStudy  YearOfStudy  @relation(fields: [yearOfStudyId], references: [id])
  yearOfStudyId String
  classroom     Classroom    @relation(fields: [classroomId], references: [id])
  classroomId   String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model TestCategory {
  id           String                @id @default(uuid())
  name         String
  alias        String
  tests        Test[]
  scoreResult  CategoryScoreResult[]
  measureUnit  MeasureUnitEnum       @default(AMOUNT)
  algoOperator String
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

model YearOfStudy {
  id                 String              @id @default(uuid())
  yearName           String              @unique
  startDate          DateTime
  endDate            DateTime
  studentEnrollments StudentEnrollment[]
  tests              Test[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  teacherId          String?
  teacherEnrollments TeacherEnrollment[]
}

model CategoryScoreResult {
  id             String       @id @default(uuid())
  maleScore      Float        @db.DoublePrecision
  maleGrade      Float        @db.DoublePrecision
  femaleScore    Float        @db.DoublePrecision
  femaleGrade    Float        @db.DoublePrecision
  testCategory   TestCategory @relation(fields: [testCategoryId], references: [id])
  testCategoryId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model StudentEnrollment {
  id            String      @id @default(uuid())
  yearOfStudyId String
  yearOfStudy   YearOfStudy @relation(fields: [yearOfStudyId], references: [id])
  classroomId   String
  classroom     Classroom   @relation(fields: [classroomId], references: [id])
  studentId     String
  student       Student     @relation(fields: [studentId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model TeacherEnrollment {
  id            String      @id @default(uuid())
  yearOfStudyId String
  yearOfStudy   YearOfStudy @relation(fields: [yearOfStudyId], references: [id])
  classroomId   String
  classroom     Classroom   @relation(fields: [classroomId], references: [id])
  teacherId     String
  teacher       Teacher     @relation(fields: [teacherId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
